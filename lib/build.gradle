plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'maven-publish'
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
}

group 'ca.aqtech'
version '1.0.0-beta'

ext {
    PUBLISH_GROUP_ID = 'ca.aqtech'
    PUBLISH_VERSION = '1.0.0-beta'
    PUBLISH_ARTIFACT_ID = 'mctreesearch4j'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'mctreesearch4j'
                description = 'Implementation of Monte Carlo Tree Search in JVM'
                url = 'mctreesearch4j.aqtech.ca'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/JunTaoLuo/mctreesearch4j/MIT-license.txt'
                    }
                }
                developers {
                    developer {
                        id = 'larkz'
                        name = 'Larkin Liu'
                        email = 'larkin.liu@aqtech.ca'
                    }
                    developer {
                        id = 'JunTaoLuo'
                        name = 'Jun Tao Luo'
                        email = 'jt.luo@mail.utoronto.ca'
                    }
                }
            }
        }
    }
}

jar {
    manifest {
        attributes["Main-Class"] = "ca.aqtech.mctreesearch4j.MDP"
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

/*
tasks.withType(GenerateMavenPom).all {
    def matcher = name =~ /generatePomFileFor(\w+)Publication/
    def publicationName = matcher[0][1]
    destination = "$buildDir/poms/${publicationName}-pom.xml"
}

 */

// apply from: "${rootDir}/scripts/publish-root.gradle"
// apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"

